---

---

<label
  id="themeToggleButton"
  class="relative inline-flex items-center cursor-pointer"
>
  <input
    type="checkbox"
    id="themeToggleCheckbox"
    class="sr-only"
    aria-label="Toggle dark mode"
  />
  <div
    class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 flex items-center justify-between px-1"
  >
    <svg
      id="moonIcon"
      class="w-4 h-4 text-gray-500 dark:text-gray-100 transition-opacity opacity-100"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      ><path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
      ></path></svg
    >
    <svg
      id="sunIcon"
      class="w-4 h-4 text-gray-500 dark:text-gray-100 transition-opacity opacity-0"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      ><path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M12 3v1m0 16v1m9-9h1M3 12H2m15.325 3.325l-.707.707M6.343 6.343l-.707-.707m12.728 0l-.707-.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
      ></path></svg
    >
    <div
      id="themeToggleHandle"
      class="w-5 h-5 bg-white rounded-full shadow-md transform transition-transform translate-x-0"
    >
    </div>
  </div>
</label>

<script>
  const ALL_THEMES = ["dark", "blue", "orange", "green", "light"];
  const DEFAULT_THEME = "dark";

  type Theme = "light" | "dark" | "blue" | "orange" | "green" | string;

  function getThemePreferenceFromStorage(): Theme {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      const storedTheme = localStorage.getItem("theme");
      if (ALL_THEMES.includes(storedTheme!)) {
        return storedTheme!;
      }
    }

    // Asegurarse de que document existe antes de intentar acceder a él
    if (typeof document === "undefined") {
      return DEFAULT_THEME; // O el valor que consideres seguro para el servidor
    }

    const html = document.documentElement;
    let detectedTheme: Theme = DEFAULT_THEME;

    for (const themeClass of ALL_THEMES) {
      if (html.classList.contains(themeClass)) {
        detectedTheme = themeClass as Theme;
        return detectedTheme;
      }
    }

    if (html.classList.contains("dark")) {
      detectedTheme = "dark";
    } else {
      detectedTheme = "light";
    }

    return detectedTheme;
  }

  function applyTheme(theme: Theme) {
    const htmlElement = document.documentElement; // Queremos aplicar la clase al <html>

    // 1. Limpia todas las clases de tema posibles del <html>
    ALL_THEMES.forEach((t) => {
      htmlElement.classList.remove(t);
    });

    // 2. Añade la clase del tema actual
    // Si el tema es 'light', no añadimos una clase específica 'light' si es el default
    // Puedes decidir añadir '.light' si quieres estilos explícitos para él.
    if (theme !== "light") {
      // Solo añade la clase si no es el tema "light"
      htmlElement.classList.add(theme);
    }

    if (typeof localStorage !== "undefined") {
      localStorage.setItem("theme", theme);
    }
  }

  const themeToggleCheckbox = document.getElementById(
    "themeToggleCheckbox"
  ) as HTMLInputElement;
  const themeToggleHandle = document.getElementById(
    "themeToggleHandle"
  ) as HTMLDivElement;
  const moonIcon = document.getElementById("moonIcon") as unknown as SVGElement;
  const sunIcon = document.getElementById("sunIcon") as unknown as SVGElement;

  const updateThemeUI = (theme: string) => {
    const isDarkThemeActive = theme === "dark";
    themeToggleCheckbox.checked = isDarkThemeActive;

    if (isDarkThemeActive) {
      themeToggleHandle.classList.add("-translate-x-5");
      themeToggleHandle.classList.remove("translate-x-0");
      moonIcon.classList.add("opacity-100", "translate-x-6"); // Si usas translate-x-6, asegúrate que esté en tu tailwind.config
      moonIcon.classList.remove("opacity-0");
      sunIcon.classList.add("opacity-0");
      sunIcon.classList.remove("opacity-100", "-translate-x-2");
    } else {
      themeToggleHandle.classList.add("translate-x-0");
      themeToggleHandle.classList.remove("-translate-x-5");
      moonIcon.classList.add("opacity-0");
      moonIcon.classList.remove("opacity-100", "translate-x-6");
      sunIcon.classList.add("opacity-100", "-translate-x-2"); // Si usas -translate-x-2, asegúrate que esté en tu tailwind.config
      sunIcon.classList.remove("opacity-0");
    }
  };

  const toggleTheme = () => {
    const htmlElement = document.documentElement;
    let currentTheme: string = DEFAULT_THEME; // Inicializa con el tema por defecto

    // Encuentra la clase de tema activa en el htmlElement
    // Si no hay ninguna clase de tema, asumimos 'light' (o el DEFAULT_THEME si es otra cosa)
    const activeThemeClass = ALL_THEMES.find((t) =>
      htmlElement.classList.contains(t)
    );
    if (activeThemeClass) {
      currentTheme = activeThemeClass;
    } else if (!htmlElement.classList.contains("dark")) {
      // Si no hay clase de tema y no es 'dark', asumimos 'light'
      currentTheme = "light";
    }

    let newTheme: string;

    // Lógica para alternar SOLAMENTE entre 'dark' y 'light'
    if (currentTheme === "dark") {
      newTheme = "light";
    } else {
      // Si el tema actual no es 'dark' (es 'light', 'blue', 'orange', 'green'),
      // el botón lo cambiará a 'dark'.
      newTheme = "dark";
    }

    localStorage.setItem("theme", newTheme);
    applyTheme(newTheme); // applyTheme ahora usa clases
    updateThemeUI(newTheme);
  };

  if (themeToggleCheckbox) {
    themeToggleCheckbox.addEventListener("change", toggleTheme);
  }

  requestAnimationFrame(() => {
    // Inicializar la UI del botón con el tema actual al cargar
    const htmlElement = document.documentElement;
    let initialThemeFromDOM: string = DEFAULT_THEME;
    const activeThemeClass = ALL_THEMES.find((t) =>
      htmlElement.classList.contains(t)
    );
    if (activeThemeClass) {
      initialThemeFromDOM = activeThemeClass;
    } else if (!htmlElement.classList.contains("dark")) {
      // Si no hay clase de tema y no es 'dark', asumimos 'light'
      initialThemeFromDOM = "light";
    }

    updateThemeUI(initialThemeFromDOM);
  });
  // Aplicar el tema inicial desde el almacenamiento local
  const initialTheme = getThemePreferenceFromStorage();
  applyTheme(initialTheme);
  updateThemeUI(initialTheme);
</script>
