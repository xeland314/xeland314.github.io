import CodeBlock from "@/app/components/codeBlock";
import React from "react";
import NumberRecognitionTable from "./table";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "üßÆ Reconocedor de Expresiones Matem√°ticas - Christopher Villamar√≠n Projects",
  description:
    "Descubre el Reconocedor de Expresiones Matem√°ticas, un analizador l√©xico dise√±ado para procesar y manejar operaciones matem√°ticas complejas. Integra C y Go para extender funcionalidades avanzadas.",
  keywords: [
    "Reconocedor de Expresiones Matem√°ticas",
    "an√°lisis l√©xico",
    "compiladores",
    "matem√°ticas",
    "procesamiento num√©rico",
    "C",
    "Go",
    "Christopher Villamar√≠n",
    "xeland314",
    "proyectos",
    "Ecuador"
  ],
  authors: [
    { name: "Christopher Alexander Villamar√≠n Pila" },
    { name: "xeland314" },
  ],
  creator: "xeland314",
  openGraph: {
    title: "üßÆ Reconocedor de Expresiones Matem√°ticas - Proyecto de Christopher Villamar√≠n",
    description:
      "Explora un analizador l√©xico que procesa operaciones matem√°ticas complejas y ampl√≠a sus capacidades con la integraci√≥n de C y Go.",
    url: "https://xeland314.github.io/projects/es/math-expression-recognizer/",
    type: "website",
    images: [
      {
        url: "https://raw.githubusercontent.com/xeland314/Analizador-lexico/refs/heads/main/imgs/Captura1.png",
        width: 1200,
        height: 630,
        alt: "Vista previa del proyecto Reconocedor de Expresiones Matem√°ticas",
      },
    ],
  },
  robots: "index, follow",
};


export default function MathExpressionRecognizerPage() {
  return (
    <div className="p-0 sm:p-6">
      <header className="text-center mb-8">
        <h1 className="text-4xl font-bold mb-4">
          üßÆ Reconocedor de Expresiones Matem√°ticas
        </h1>
        <p className="text-lg">
          Un proyecto enfocado en el desarrollo de un analizador l√©xico para
          reconocer, procesar y manejar operaciones matem√°ticas complejas.
        </p>
      </header>

      <section className="mb-8">
        <h2 className="text-3xl font-semibold mb-4">üìò Introducci√≥n</h2>
        <p className="mb-4">
          El analizador l√©xico representa la primera etapa de un compilador,
          encargado de identificar errores y procesar los datos para avanzar a
          las siguientes fases. Este proyecto desarrolla un sistema que reconoce
          sistemas num√©ricos y utiliza expresiones regulares √≥ptimas para
          cumplir con sus objetivos.
        </p>
      </section>

      <section className="mb-8">
        <h2 className="text-3xl font-semibold mb-4">üéØ Objetivos</h2>
        <ul className="list-disc pl-6 space-y-2">
          <li>
            Reconocer valores num√©ricos de distintos sistemas de numeraci√≥n.
          </li>
          <li>Realizar conversiones entre sistemas num√©ricos.</li>
          <li>
            Distinguir operadores aritm√©ticos y signos de apertura/cierre.
          </li>
          <li>Reconocer funciones matem√°ticas.</li>
          <li>
            Implementar gram√°ticas para resolver operaciones b√°sicas y
            avanzadas.
          </li>
          <li>
            Guardar valores ingresados para reutilizarlos como en lenguajes de
            programaci√≥n.
          </li>
        </ul>
      </section>

      <section className="mb-8">
        <h2 className="text-3xl font-semibold mb-4">
          üîç Descripci√≥n del problema
        </h2>
        <p className="mb-4">
          El usuario puede ingresar n√∫meros que pertenecen a diferentes sistemas
          num√©ricos. El programa reconoce dichos sistemas, traduce las bases
          num√©ricas y distingue operadores aritm√©ticos, signos de agrupaci√≥n y
          funciones matem√°ticas mediante expresiones regulares.
        </p>
      </section>

      <NumberRecognitionTable />

      <section className="mb-8">
        <h2 className="text-3xl font-semibold mb-4">üìö C & Go</h2>
        <p className="mb-4">
          Para extender funciones matem√°ticas, el programa utiliza Go para
          exportar definiciones inexistentes en C, como la ra√≠z c√∫bica. Esto se
          logra compilando el archivo <code>math_2.go</code> en una librer√≠a
          est√°tica.
        </p>
        <CodeBlock code={`go build -buildmode=c-archive math_2.go`} />
        <p className="mt-4">
          Esto genera archivos <code>math_2.h</code> y <code>math_2.a</code> que
          se integran en el proyecto C durante la compilaci√≥n.
        </p>
      </section>

      <section className="mb-8">
        <h2 className="text-3xl font-semibold mb-4">
          üîß Ejecuci√≥n del programa
        </h2>
        <p className="mb-4">
          Compila y ejecuta el programa utilizando los siguientes comandos en la
          terminal de Ubuntu:
        </p>
        <pre className="p-4 rounded-md">
          {`yacc -d -v proyecto.y
lex reconocedor.l
gcc y.tab.c funciones.c lex.yy.c gofuncs/math_2.a -pthread -lfl -lm -o math_app
./math_app`}
        </pre>
        <p className="mt-4">
          O simplemente usa <code>make</code> para automatizar el proceso.
        </p>
      </section>

      <section className="mb-8">
        <h2 className="text-3xl font-semibold mb-4">
          üìä Ejemplos de ejecuci√≥n
        </h2>
        <p className="mb-4">
          Para preparar operaciones, utiliza la entrada y salida en archivos:
        </p>
        <CodeBlock code={`./math_app < entrada.txt > salida.txt`} />
        <div className="text-center mt-4">
          <img
            src="https://raw.githubusercontent.com/xeland314/Analizador-lexico/refs/heads/main/imgs/Captura1.png"
            alt="Entrada"
            className="rounded-lg shadow-md mx-auto mb-4"
          />
          <img
            src="https://raw.githubusercontent.com/xeland314/Analizador-lexico/refs/heads/main/imgs/Captura2.png"
            alt="Salida"
            className="rounded-lg shadow-md mx-auto"
          />
        </div>
      </section>
    </div>
  );
}
